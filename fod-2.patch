From 41d4372f438a89a670181cc8b1fef1fb6a830ea6 Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Sun, 18 Dec 2022 18:20:40 -0500
Subject: [PATCH] FOD support for Asus, Samsung recent Xiaomi and RedMagic 8
 devices

Add
Bunch of FOD stuff -- commonize refreshing the services, start supporting AIDL Samsung

Revert
Lineage extra udfps addons

fixup
Add Samsung sysinput

Thanks Asus for providing a free device to make this support
And thanks @davigamer987 for donating enough to get a Samsung FOD device
to make this

14QPR2 note: Forced legacy/pre-"UdfpsRefactor"
Thanks @jgudec for Xiaomi support
Thanks @boydaihungst for Redmagic 6 support

Co-authored-by: jgudec <jakov.gudec@gmail.com>
Co-authored-by: Huy Hoang
Change-Id: Ibd0f9ea8fba584a38c060fd9271549a5e106b4eb

Also include commits:
fix(fod): Extra Dim overlap fod overlay
Fix Xiaomi custom vendors implementing fingerprint properly
Also override UDFPS infos on AIDL fingerprints -- needed for FP on S24
Try catch the Xiaomi calls
Typo in observing Samsung brightness
---
 packages/SystemUI/Android.bp                  |   4 +
 packages/SystemUI/res/layout/udfps_view.xml   |   6 -
 .../systemui/biometrics/UdfpsController.java  |  78 +++-
 .../biometrics/UdfpsControllerOverlay.kt      |   7 +-
 .../systemui/biometrics/UdfpsSurfaceView.java | 159 -------
 .../android/systemui/biometrics/UdfpsView.kt  | 247 +++++++++-
 .../shared/DeviceEntryUdfpsRefactor.kt        |   2 +-
 services/core/Android.bp                      |   6 +
 .../server/biometrics/AuthService.java        | 425 +++++++++++++++++-
 .../fingerprint/FingerprintService.java       |   3 +-
 .../fingerprint/aidl/FingerprintProvider.java |  26 +-
 11 files changed, 752 insertions(+), 211 deletions(-)
 delete mode 100644 packages/SystemUI/src/com/android/systemui/biometrics/UdfpsSurfaceView.java

diff --git a/frameworks/base/packages/SystemUI/Android.bp b/frameworks/base/packages/SystemUI/Android.bp
index 76ef42d9d42a..0143e4ee7889 100644
--- a/frameworks/base/packages/SystemUI/Android.bp
+++ b/frameworks/base/packages/SystemUI/Android.bp
@@ -166,6 +166,10 @@ android_library {
         "androidx.compose.animation_animation-graphics",
         "vendor.lineage.powershare-V1.0-java",
         "FadingEdgeLayoutLib",
+        "vendor.goodix.hardware.biometrics.fingerprint-V2.1-java",
+        "vendor.xiaomi.hw.touchfeature-V1.0-java",
+        "vendor.xiaomi.hardware.fingerprintextension-V1.0-java",
+        "vendor.nubia.ifaa-V1.0-java",
     ],
     libs: [
         "keepanno-annotations",
diff --git a/frameworks/base/packages/SystemUI/res/layout/udfps_view.xml b/frameworks/base/packages/SystemUI/res/layout/udfps_view.xml
index 0fcbfa161ddf..257d238f5c54 100644
--- a/frameworks/base/packages/SystemUI/res/layout/udfps_view.xml
+++ b/frameworks/base/packages/SystemUI/res/layout/udfps_view.xml
@@ -28,10 +28,4 @@
         android:layout_width="match_parent"
         android:layout_height="match_parent"/>
 
-    <com.android.systemui.biometrics.UdfpsSurfaceView
-        android:id="@+id/hbm_view"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:visibility="invisible"/>
-
 </com.android.systemui.biometrics.UdfpsView>
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index 64ddf5606217..91478c5b7db9 100644
--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -45,12 +45,14 @@ import android.hardware.fingerprint.FingerprintSensorProperties;
 import android.hardware.fingerprint.FingerprintSensorPropertiesInternal;
 import android.hardware.fingerprint.IUdfpsOverlayController;
 import android.hardware.fingerprint.IUdfpsOverlayControllerCallback;
+import android.hardware.display.ColorDisplayManager;
 import android.hardware.input.InputManager;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Handler;
 import android.os.PowerManager;
 import android.os.Trace;
+import android.os.SystemProperties;
 import android.os.UserHandle;
 import android.os.VibrationAttributes;
 import android.os.VibrationEffect;
@@ -123,10 +125,13 @@ import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.concurrent.Executor;
-
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
 import javax.inject.Inject;
 
 import kotlinx.coroutines.CoroutineScope;
+import vendor.nubia.ifaa.V1_0.IIfaa;
 import kotlinx.coroutines.ExperimentalCoroutinesApi;
 
 /**
@@ -190,6 +195,8 @@ public class UdfpsController implements DozeReceiver, Dumpable {
     @NonNull private final UdfpsKeyguardAccessibilityDelegate mUdfpsKeyguardAccessibilityDelegate;
     @NonNull private final SelectedUserInteractor mSelectedUserInteractor;
     @NonNull private final FpsUnlockTracker mFpsUnlockTracker;
+    @NonNull private final ColorDisplayManager mColorDisplayManager;
+    private boolean mIgnoreExtraDim;
     private final boolean mIgnoreRefreshRate;
     private final KeyguardTransitionInteractor mKeyguardTransitionInteractor;
 
@@ -278,6 +285,47 @@ public class UdfpsController implements DozeReceiver, Dumpable {
         }
     };
 
+  // Nubia 6 series fingerprint control command
+    // cmd = 13 -> finger down
+    // cmd = 14 -> after UI ready
+    // cmd = 15 -> finger up
+    public byte[] processCmd(int cmd, int param1, int param2, byte[] send_buf, int length) {
+        try {
+            if (cmd == 999) {
+                Log.d(TAG, "processCmd: 999");
+                return null;
+            }
+            ArrayList<Byte> sendList = new ArrayList<>();
+            if (send_buf != null) {
+                for (byte b : send_buf) {
+                    sendList.add(Byte.valueOf(b));
+                }
+            }
+            if (send_buf == null) {
+                Log.d(TAG, "FingerprintService send_buf = " + send_buf);
+            }
+            IIfaa iIfaaDaemon = IIfaa.getService();
+            if (iIfaaDaemon == null) {
+                Log.d(TAG, "processCmd: no iIfaaDaemon!");
+                return null;
+            }
+            ArrayList<Byte> resultList = iIfaaDaemon.processCmd(cmd, param1, param2, sendList, length);
+            int n = resultList.size();
+            Log.d(TAG, "FingerprintService result length n = " + n);
+            if (n == 0) {
+                return null;
+            }
+            byte[] result = new byte[n];
+            for (int i = 0; i < n; i++) {
+                result[i] = resultList.get(i).byteValue();
+            }
+            return result;
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        }
+    };
+
     @Override
     public void dump(@NonNull PrintWriter pw, @NonNull String[] args) {
         final int touchConfigId = mContext.getResources().getInteger(
@@ -721,7 +769,8 @@ public class UdfpsController implements DozeReceiver, Dumpable {
             Lazy<DefaultUdfpsTouchOverlayViewModel> defaultUdfpsTouchOverlayViewModel,
             @NonNull UdfpsOverlayInteractor udfpsOverlayInteractor,
             @NonNull PowerInteractor powerInteractor,
-            @Application CoroutineScope scope) {
+            @Application CoroutineScope scope,
+            @NonNull ColorDisplayManager colorDisplayManager) {
         mContext = context;
         mExecution = execution;
         mVibrator = vibrator;
@@ -765,6 +814,7 @@ public class UdfpsController implements DozeReceiver, Dumpable {
         mFpsUnlockTracker = fpsUnlockTracker;
         mFpsUnlockTracker.startTracking();
         mKeyguardTransitionInteractor = keyguardTransitionInteractor;
+        mColorDisplayManager = colorDisplayManager;
 
         mTouchProcessor = singlePointerTouchProcessor;
         mSessionTracker = sessionTracker;
@@ -919,6 +969,11 @@ public class UdfpsController implements DozeReceiver, Dumpable {
     private void showUdfpsOverlay(@NonNull UdfpsControllerOverlay overlay) {
         mExecution.assertIsMainThread();
 
+        mIgnoreExtraDim = mColorDisplayManager.isReduceBrightColorsActivated();
+        if (mIgnoreExtraDim) {
+            Log.d(TAG, "Current extra dim state (showUdfpsOverlay): " + mIgnoreExtraDim);
+        }
+
         mOverlay = overlay;
         final int requestReason = overlay.getRequestReason();
 
@@ -1214,6 +1269,10 @@ public class UdfpsController implements DozeReceiver, Dumpable {
             mSmartPixelsFlag = true;
         }
         if (isOptical()) {
+ if (mIgnoreExtraDim) {
+                mColorDisplayManager.setReduceBrightColorsActivated(false);
+                Log.d(TAG, "Extra dim disabled");
+            }
             mLatencyTracker.onActionStart(ACTION_UDFPS_ILLUMINATE);
         }
         if (getBiometricSessionType() == SESSION_KEYGUARD) {
@@ -1245,10 +1304,15 @@ public class UdfpsController implements DozeReceiver, Dumpable {
                 }
             }
         }
-
+ if(SystemProperties.get("ro.vendor.build.fingerprint").contains("nubia/NX669")) {
+          processCmd(13, 0, 0, new byte[0], 0);
+        }
         for (Callback cb : mCallbacks) {
             cb.onFingerDown();
         }
+   if(SystemProperties.get("ro.vendor.build.fingerprint").contains("nubia/NX669")) {
+          processCmd(14, 0, 0, new byte[0], 0);
+        }
         if (mUdfpsAnimation != null) {
             mUdfpsAnimation.show();
         }
@@ -1293,8 +1357,16 @@ public class UdfpsController implements DozeReceiver, Dumpable {
         }
 
         if (mOnFingerDown) {
+ if (mIgnoreExtraDim && isOptical()) {
+                mColorDisplayManager.setReduceBrightColorsActivated(true);
+                Log.d(TAG, "Extra dim restored");
+            }
             mFingerprintManager.onPointerUp(requestId, mSensorProps.sensorId, pointerId, x,
                     y, minor, major, orientation, time, gestureStart, isAod);
+            if(SystemProperties.get("ro.vendor.build.fingerprint").contains("nubia/NX669")) {
+            processCmd(15, 0, 0, new byte[0], 0);
+            }
+
             for (Callback cb : mCallbacks) {
                 cb.onFingerUp();
             }
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt b/frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt
index 56ca1df92e3b..0f8f1bc8dd44 100644
--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt
+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt
@@ -176,7 +176,9 @@ class UdfpsControllerOverlay @JvmOverloads constructor(
         gravity = android.view.Gravity.TOP or android.view.Gravity.LEFT
         layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS
         flags = (Utils.FINGERPRINT_OVERLAY_LAYOUT_PARAM_FLAGS or
-                WindowManager.LayoutParams.FLAG_SPLIT_TOUCH)
+                 WindowManager.LayoutParams.FLAG_SPLIT_TOUCH) or
+                WindowManager.LayoutParams.FLAG_DIM_BEHIND
+        dimAmount = 0.0f
         privateFlags = WindowManager.LayoutParams.PRIVATE_FLAG_TRUSTED_OVERLAY
         // Avoid announcing window title.
         accessibilityTitle = " "
@@ -288,6 +290,9 @@ class UdfpsControllerOverlay @JvmOverloads constructor(
                         addViewNowOrLater(this, animation)
                         windowManager.addView(frame, frameLayoutParams)
                         sensorRect = sensorBounds
+dimUpdate = {
+                            windowManager.updateViewLayout(this, coreLayoutParams.updateDimensions(animation).apply { dimAmount = it })
+                        }
                     }
                 }
                 getTouchOverlay()?.apply {
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsSurfaceView.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsSurfaceView.java
deleted file mode 100644
index 2e0e9491dd5b..000000000000
--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsSurfaceView.java
+++ /dev/null
@@ -1,159 +0,0 @@
-/*
- * Copyright (C) 2021 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.systemui.biometrics;
-
-import android.annotation.NonNull;
-import android.annotation.Nullable;
-import android.content.Context;
-import android.graphics.drawable.Drawable;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.PixelFormat;
-import android.graphics.RectF;
-import android.util.AttributeSet;
-import android.util.Log;
-import android.view.Surface;
-import android.view.SurfaceHolder;
-import android.view.SurfaceView;
-
-import com.android.systemui.res.R;
-
-/**
- * Surface View for providing the Global High-Brightness Mode (GHBM) illumination for UDFPS.
- */
-public class UdfpsSurfaceView extends SurfaceView implements SurfaceHolder.Callback {
-    private static final String TAG = "UdfpsSurfaceView";
-
-    /**
-     * Notifies {@link UdfpsView} when to enable GHBM illumination.
-     */
-    interface GhbmIlluminationListener {
-        /**
-         * @param surface the surface for which GHBM should be enabled.
-         * @param onDisplayConfigured a runnable that should be run after GHBM is enabled.
-         */
-        void enableGhbm(@NonNull Surface surface, @Nullable Runnable onDisplayConfigured);
-    }
-
-    @NonNull private final SurfaceHolder mHolder;
-    @NonNull private final Paint mSensorPaint;
-
-    @Nullable private GhbmIlluminationListener mGhbmIlluminationListener;
-    @Nullable private Runnable mOnDisplayConfigured;
-    boolean mAwaitingSurfaceToStartIllumination;
-    boolean mHasValidSurface;
-
-    private Drawable mUdfpsIconPressed;
-
-    public UdfpsSurfaceView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-
-        // Make this SurfaceView draw on top of everything else in this window. This allows us to
-        // 1) Always show the HBM circle on top of everything else, and
-        // 2) Properly composite this view with any other animations in the same window no matter
-        //    what contents are added in which order to this view hierarchy.
-        setZOrderOnTop(true);
-
-        mHolder = getHolder();
-        mHolder.addCallback(this);
-        mHolder.setFormat(PixelFormat.RGBA_8888);
-
-        mSensorPaint = new Paint(0 /* flags */);
-        mSensorPaint.setAntiAlias(true);
-        mSensorPaint.setColor(context.getColor(R.color.config_udfpsColor));
-        mSensorPaint.setStyle(Paint.Style.FILL);
-
-        mUdfpsIconPressed = context.getDrawable(R.drawable.udfps_icon_pressed);
-    }
-
-    @Override public void surfaceCreated(SurfaceHolder holder) {
-        mHasValidSurface = true;
-        if (mAwaitingSurfaceToStartIllumination) {
-            doIlluminate(mOnDisplayConfigured);
-            mOnDisplayConfigured = null;
-            mAwaitingSurfaceToStartIllumination = false;
-        }
-    }
-
-    @Override
-    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
-        // Unused.
-    }
-
-    @Override public void surfaceDestroyed(SurfaceHolder holder) {
-        mHasValidSurface = false;
-    }
-
-    void setGhbmIlluminationListener(@Nullable GhbmIlluminationListener listener) {
-        mGhbmIlluminationListener = listener;
-    }
-
-    /**
-     * Note: there is no corresponding method to stop GHBM illumination. It is expected that
-     * {@link UdfpsView} will hide this view, which would destroy the surface and remove the
-     * illumination dot.
-     */
-    void startGhbmIllumination(@Nullable Runnable onDisplayConfigured) {
-        if (mGhbmIlluminationListener == null) {
-            Log.e(TAG, "startIllumination | mGhbmIlluminationListener is null");
-            return;
-        }
-
-        if (mHasValidSurface) {
-            doIlluminate(onDisplayConfigured);
-        } else {
-            mAwaitingSurfaceToStartIllumination = true;
-            mOnDisplayConfigured = onDisplayConfigured;
-        }
-    }
-
-    private void doIlluminate(@Nullable Runnable onDisplayConfigured) {
-        if (mGhbmIlluminationListener == null) {
-            Log.e(TAG, "doIlluminate | mGhbmIlluminationListener is null");
-            return;
-        }
-
-        mGhbmIlluminationListener.enableGhbm(mHolder.getSurface(), onDisplayConfigured);
-    }
-
-    /**
-     * Immediately draws the illumination dot on this SurfaceView's surface.
-     */
-    void drawIlluminationDot(@NonNull RectF sensorRect) {
-        if (!mHasValidSurface) {
-            Log.e(TAG, "drawIlluminationDot | the surface is destroyed or was never created.");
-            return;
-        }
-        Canvas canvas = null;
-        try {
-            canvas = mHolder.lockCanvas();
-            mUdfpsIconPressed.setBounds(
-                    Math.round(sensorRect.left),
-                    Math.round(sensorRect.top),
-                    Math.round(sensorRect.right),
-                    Math.round(sensorRect.bottom)
-            );
-            mUdfpsIconPressed.draw(canvas);
-            canvas.drawOval(sensorRect, mSensorPaint);
-        } finally {
-            // Make sure the surface is never left in a bad state.
-            if (canvas != null) {
-                mHolder.unlockCanvasAndPost(canvas);
-            }
-        }
-    }
-}
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt b/frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt
index c0588cb49591..92816263b288 100644
--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt
+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt
@@ -19,6 +19,12 @@ import android.content.Context
 import android.graphics.Canvas
 import android.graphics.Color
 import android.graphics.Paint
+import android.graphics.PixelFormat
+import android.graphics.PointF
+import android.os.FileObserver
+import android.view.SurfaceHolder
+import android.view.SurfaceView
+import android.view.ViewGroup
 import android.graphics.Rect
 import android.graphics.RectF
 import android.provider.Settings
@@ -26,10 +32,21 @@ import android.os.UserHandle;
 import android.util.AttributeSet
 import android.util.Log
 import android.view.MotionEvent
-import android.view.Surface
 import android.widget.FrameLayout
 import com.android.systemui.biometrics.shared.model.UdfpsOverlayParams
 import com.android.systemui.doze.DozeReceiver
+import java.io.File
+import java.io.FileNotFoundException
+
+import vendor.goodix.hardware.biometrics.fingerprint.V2_1.IGoodixFingerprintDaemon
+
+import vendor.xiaomi.hw.touchfeature.V1_0.ITouchFeature
+import vendor.xiaomi.hardware.fingerprintextension.V1_0.IXiaomiFingerprint
+
+import android.os.Handler
+import android.os.HandlerThread
+
+import vendor.nubia.ifaa.V1_0.IIfaa
 import com.android.systemui.res.R
 
 private const val TAG = "UdfpsView"
@@ -41,6 +58,54 @@ class UdfpsView(
     context: Context,
     attrs: AttributeSet?
 ) : FrameLayout(context, attrs), DozeReceiver {
+  private var currentOnIlluminatedRunnable: Runnable? = null
+    private val mySurfaceView = SurfaceView(context)
+    init {
+        mySurfaceView.setVisibility(INVISIBLE)
+        mySurfaceView.setZOrderOnTop(true)
+        addView(mySurfaceView, FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT))
+        mySurfaceView.holder.addCallback(object: SurfaceHolder.Callback{
+            override fun surfaceCreated(p0: SurfaceHolder) {
+                Log.d("PHH", "Surface created!")
+                val paint = Paint(0 /* flags */);
+                paint.setAntiAlias(true);
+                paint.setStyle(Paint.Style.FILL);
+                val colorStr = android.os.SystemProperties.get("persist.sys.phh.fod_color", "00ff00");
+                try {
+                    val parsedColor = Color.parseColor("#" + colorStr);
+                    val r = (parsedColor shr 16) and 0xff;
+                    val g = (parsedColor shr  8) and 0xff;
+                    val b = (parsedColor shr  0) and 0xff;
+                    paint.setARGB(255, r, g, b);
+                } catch(t: Throwable) {
+                    Log.d("PHH", "Failed parsing color #" + colorStr, t);
+                }
+                var canvas: Canvas? = null
+                try {
+                    canvas = p0.lockCanvas();
+                    Log.d("PHH", "Surface dimensions ${canvas.getWidth()*1.0f} ${canvas.getHeight()*1.0f}")
+                    canvas.drawOval(RectF(overlayParams.sensorBounds), paint);
+                } finally {
+                    // Make sure the surface is never left in a bad state.
+                    if (canvas != null) {
+                        p0.unlockCanvasAndPost(canvas);
+                    }
+                }
+
+                currentOnIlluminatedRunnable?.run()
+            }
+
+            override fun surfaceChanged(p0: SurfaceHolder, p1: Int, p2: Int, p3: Int) {
+                Log.d("PHH", "Got surface size $p1 $p2 $p3")
+            }
+
+            override fun surfaceDestroyed(p0: SurfaceHolder) {
+                Log.d("PHH", "Surface destroyed!")
+            }
+        })
+        mySurfaceView.holder.setFormat(PixelFormat.RGBA_8888)
+
+    }
     // sensorRect may be bigger than the sensor. True sensor dimensions are defined in
     // overlayParams.sensorBounds
     var sensorRect = Rect()
@@ -51,14 +116,14 @@ class UdfpsView(
         textSize = 32f
     }
 
-    private var ghbmView: UdfpsSurfaceView? = null
-
     /** View controller (can be different for enrollment, BiometricPrompt, Keyguard, etc.). */
     var animationViewController: UdfpsAnimationViewController<*>? = null
 
     /** Parameters that affect the position and size of the overlay. */
     var overlayParams = UdfpsOverlayParams()
 
+    var dimUpdate: (Float) -> Unit = {}
+
     /** Debug message. */
     var debugMessage: String? = null
         set(value) {
@@ -79,10 +144,6 @@ class UdfpsView(
         return (animationViewController == null || !animationViewController!!.shouldPauseAuth())
     }
 
-    override fun onFinishInflate() {
-        ghbmView = findViewById(R.id.hbm_view)
-    }
-
     override fun dozeTimeTick() {
         animationViewController?.dozeTimeTick()
     }
@@ -130,36 +191,174 @@ class UdfpsView(
         }
     }
 
+fun goodixCmd(id: Int) {
+        val goodixSvc = IGoodixFingerprintDaemon.getService()
+        if(goodixSvc != null) {
+            goodixSvc.sendCommand(id, ArrayList(), { returnCode, resultData -> {
+                Log.e("PHH-Enroll", "Goodix send command returned code "+ returnCode);
+            }});
+        }
+    }
+
+    val asusGhbmOnAchieved = "/sys/class/drm/ghbm_on_achieved"
+    var hasAsusGhbm = File(asusGhbmOnAchieved).exists()
+    var samsungActualMaskBrightness = "/sys/class/lcd/panel/actual_mask_brightness"
+    val hasSamsungMask = File(samsungActualMaskBrightness).exists()
+    var fodFileObserver: FileObserver? = null
+
+    val xiaomiDispParam = "/sys/class/mi_display/disp-DSI-0/disp_param"
+    var hasXiaomiLhbm = try {
+            val xiaomiFingerprintService = IXiaomiFingerprint.getService()
+            File(xiaomiDispParam).exists() && xiaomiFingerprintService != null
+        } catch(e: Exception) {
+            false
+        }
+
+    private val handlerThread = HandlerThread("UDFPS").also { it.start() }
+    val myHandler = Handler(handlerThread.looper)
+
+    // This file contain current hbm value
+    val nubiaHbmState = "/sys/kernel/lcd_enhance/hbm_state"
+    var hasNubiaHbm = File(nubiaHbmState).exists()
+
     fun configureDisplay(onDisplayConfigured: Runnable) {
         isDisplayConfigured = true
         animationViewController?.onDisplayConfiguring()
-        ghbmView?.let { view ->
-            view.setGhbmIlluminationListener(this::doIlluminate)
-            view.visibility = VISIBLE
-            view.startGhbmIllumination(onDisplayConfigured)
-        } ?: {
-            doIlluminate(null /* surface */, onDisplayConfigured)
+        mUdfpsDisplayMode?.enable(onDisplayConfigured)
+ mySurfaceView.setVisibility(VISIBLE)
+        Log.d("PHH", "setting surface visible!")
+
+        val brightnessFiles = listOf(
+            File("/sys/class/backlight/panel/brightness"),
+            File("/sys/class/backlight/panel0-backlight/brightness"),
+            File("/sys/devices/platform/soc/soc:mtk_leds/leds/lcd-backlight/brightness")
+        )
+        val maxBrightnessFiles = listOf(
+            File("/sys/class/backlight/panel/max_brightness"),
+            File("/sys/class/backlight/panel0-backlight/max_brightness"),
+            File("/sys/devices/platform/soc/soc:mtk_leds/leds/lcd-backlight/max_brightness")
+        )
+
+        var brightness: Double = 0.0
+        var maxBrightness: Double = 0.0
+        var bmFilesExist: Boolean = false
+
+        brightnessFiles.zip(maxBrightnessFiles) {bFile, mFile ->
+            if (bFile.exists() && mFile.exists()) {
+                bmFilesExist = true
+                brightness = bFile.readText().toDouble()
+                maxBrightness = mFile.readText().toDouble()
+            }
         }
-    }
 
-    private fun doIlluminate(surface: Surface?, onDisplayConfigured: Runnable?) {
-        if (ghbmView != null && surface == null) {
-            Log.e(TAG, "doIlluminate | surface must be non-null for GHBM")
+        val dim = if (bmFilesExist) {
+            1.0 - Math.pow( (brightness / maxBrightness), 1/2.3);
+        } else {
+            0.0
+        }
+
+        // Assume HBM is max brightness
+        Log.d("PHH-Enroll", "Brightness is $brightness / $maxBrightness, setting dim to $dim")
+        if (hasAsusGhbm) {
+            dimUpdate(dim.toFloat())
+        }
+        if (hasSamsungMask) {
+            dimUpdate(dim.toFloat())
         }
 
-        mUdfpsDisplayMode?.enable {
-            onDisplayConfigured?.run()
-            ghbmView?.drawIlluminationDot(RectF(sensorRect))
+        if(android.os.SystemProperties.get("ro.vendor.build.fingerprint").contains("ASUS")) {
+            goodixCmd(200001)
         }
+
+        if(hasXiaomiLhbm){
+            Log.d("PHH-Enroll", "Xiaomi scenario in UdfpsView reached!")
+            mySurfaceView.setVisibility(INVISIBLE)
+
+            try {
+                IXiaomiFingerprint.getService().extCmd(android.os.SystemProperties.getInt("persist.phh.xiaomi.fod.enrollment.id", 4), 1);
+            } catch(t: Throwable) {}
+            var res = try { ITouchFeature.getService().setTouchMode(0, 10, 1) } catch(t: Throwable){ -1 }
+            if(res != 0){
+                Log.d("PHH-Enroll", "SetTouchMode 10,1 was NOT executed successfully. Res is " + res)
+            }
+
+            myHandler.postDelayed({
+                var ret200 = try { ITouchFeature.getService().setTouchMode(0, 10, 1); } catch(t: Throwable) { -1 }
+
+                if(ret200 != 0){
+                    Log.d("PHH-Enroll", "myHandler.postDelayed 200ms -SetTouchMode was NOT executed successfully. Ret is " + ret200)
+                }
+
+                myHandler.postDelayed({
+                    Log.d("PHH-Enroll", "myHandler.postDelayed 600ms - line prior to setTouchMode 10,0")
+                    var ret600 = try { ITouchFeature.getService().setTouchMode(0, 10, 0); } catch(t: Throwable) { -1 }
+
+                    if(ret600 != 0){
+                        Log.d("PHH-Enroll", "myHandler.postDelayed 600ms -SetTouchMode 10,0 was NOT executed successfully. Ret is " + ret600)
+                    }
+                }, 600)
+            }, 200)
+        }
+          if(hasNubiaHbm) {
+            Log.d("PHH-Enroll", "Nubia scenario in UdfpsView reached!")
+            File(nubiaHbmState).writeText("4095")
+          }
     }
 
     fun unconfigureDisplay() {
         isDisplayConfigured = false
         animationViewController?.onDisplayUnconfigured()
-        ghbmView?.let { view ->
-            view.setGhbmIlluminationListener(null)
-            view.visibility = INVISIBLE
-        }
         mUdfpsDisplayMode?.disable(null /* onDisabled */)
+ if (hasAsusGhbm) {
+            fodFileObserver = object: FileObserver(asusGhbmOnAchieved, FileObserver.MODIFY) {
+                override fun onEvent(event: Int, path: String?): Unit {
+                    if (path == null) return
+                    Log.d("PHH-Enroll", "Asus ghbm event")
+                    try {
+                        val spotOn = File(asusGhbmOnAchieved).readText().toInt()
+                        if(spotOn == 0) {
+                            dimUpdate(0.0f)
+                            fodFileObserver?.stopWatching()
+                            fodFileObserver = null
+                        }
+                    } catch(e: Exception) {
+                        Log.d("PHH-Enroll", "Failed dimpdate off", e)
+                    }
+                }
+            };
+            fodFileObserver?.startWatching();
+        } else if (hasSamsungMask) {
+            fodFileObserver = object: FileObserver(samsungActualMaskBrightness, FileObserver.MODIFY) {
+                override fun onEvent(event: Int, path: String?): Unit {
+                    if (path == null) return
+                    Log.d("PHH-Enroll", "samsung mask brightness event")
+                    try {
+                        val spotOn = File(samsungActualMaskBrightness).readText().toInt()
+                        if(spotOn == 0) {
+                            dimUpdate(0.0f)
+                            fodFileObserver?.stopWatching()
+                            fodFileObserver = null
+                        }
+                    } catch(e: Exception) {
+                        Log.d("PHH-Enroll", "Failed dimpdate off", e)
+                    }
+                }
+            };
+            fodFileObserver?.startWatching();
+        } else if(hasXiaomiLhbm) {
+            IXiaomiFingerprint.getService().extCmd(android.os.SystemProperties.getInt("persist.phh.xiaomi.fod.enrollment.id", 4), 0);
+            ITouchFeature.getService().setTouchMode(0, 10, 0);
+        } else if(hasNubiaHbm) {
+            Log.d("PHH-Enroll", "Nubia Restore brightness")
+            File(nubiaHbmState).writeText(File("/sys/class/backlight/panel0-backlight/brightness").readText())
+        } else {
+            dimUpdate(0.0f)
+        }
+
+        mySurfaceView.setVisibility(INVISIBLE)
+        Log.d("PHH", "setting surface invisible!")
+        if(android.os.SystemProperties.get("ro.vendor.build.fingerprint").contains("ASUS")) {
+            goodixCmd(200003)
+        }
     }
 }
diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/deviceentry/shared/DeviceEntryUdfpsRefactor.kt b/frameworks/base/packages/SystemUI/src/com/android/systemui/deviceentry/shared/DeviceEntryUdfpsRefactor.kt
index b5d5803ca6fb..8a528d3baaf7 100644
--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/deviceentry/shared/DeviceEntryUdfpsRefactor.kt
+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/deviceentry/shared/DeviceEntryUdfpsRefactor.kt
@@ -33,7 +33,7 @@ object DeviceEntryUdfpsRefactor {
     /** Is the refactor enabled */
     @JvmStatic
     inline val isEnabled
-        get() = Flags.deviceEntryUdfpsRefactor()
+                get() = false //Flags.deviceEntryUdfpsRefactor()
 
     /**
      * Called to ensure code is only run when the flag is enabled. This protects users from the
diff --git a/frameworks/base/services/core/Android.bp b/frameworks/base/services/core/Android.bp
index 926eb06fd78d..b715592048e1 100644
--- a/frameworks/base/services/core/Android.bp
+++ b/frameworks/base/services/core/Android.bp
@@ -261,7 +261,13 @@ java_library_static {
         // HIDL
         "vendor.mediatek.hardware.mtkpower-V1.1-java",
         "vendor.samsung.hardware.sysinput-V1.2-java",
+        "vendor.goodix.hardware.biometrics.fingerprint-V2.1-java",
+        "vendor.samsung.hardware.biometrics.fingerprint-V3.0-java",
+        "vendor.oplus.hardware.biometrics.fingerprint-V2.1-java",
+        "vendor.oppo.hardware.biometrics.fingerprint-V2.1-java",
+        "vendor.xiaomi.hardware.fingerprintextension-V1.0-java",
         //AIDL
+        "vendor.samsung.hardware.sysinput-V1-java",
         "vendor.samsung.hardware.biometrics.fingerprint-V1-java",
         "vendor.samsung.hardware.light-V1-java",
     ],
diff --git a/frameworks/base/services/core/java/com/android/server/biometrics/AuthService.java b/frameworks/base/services/core/java/com/android/server/biometrics/AuthService.java
index eef5e79e4ed5..061f66352d3b 100644
--- a/frameworks/base/services/core/java/com/android/server/biometrics/AuthService.java
+++ b/frameworks/base/services/core/java/com/android/server/biometrics/AuthService.java
@@ -32,8 +32,6 @@ import static android.hardware.biometrics.BiometricAuthenticator.TYPE_NONE;
 import static android.hardware.biometrics.BiometricConstants.BIOMETRIC_ERROR_CANCELED;
 import static android.hardware.biometrics.BiometricManager.Authenticators;
 
-import static com.android.server.biometrics.sensors.fingerprint.aidl.FingerprintProvider.getWorkaroundSensorProps;
-
 import android.annotation.NonNull;
 import android.annotation.Nullable;
 import android.app.AppOpsManager;
@@ -48,6 +46,7 @@ import android.hardware.biometrics.IAuthService;
 import android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback;
 import android.hardware.biometrics.IBiometricService;
 import android.hardware.biometrics.IBiometricServiceReceiver;
+import android.hardware.biometrics.fingerprint.IFingerprint;
 import android.hardware.biometrics.IInvalidationCallback;
 import android.hardware.biometrics.ITestSession;
 import android.hardware.biometrics.ITestSessionCallback;
@@ -85,6 +84,26 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
+import android.hardware.display.DisplayManager;
+
+import android.graphics.Point;
+import android.text.TextUtils;
+import android.util.DisplayMetrics;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.PrintWriter;
+
+import android.os.FileObserver;
+import android.os.Build;
+
+import vendor.samsung.hardware.biometrics.fingerprint.V3_0.ISehBiometricsFingerprint;
+import vendor.goodix.hardware.biometrics.fingerprint.V2_1.IGoodixFingerprintDaemon;
+import vendor.samsung.hardware.sysinput.V1_0.ISehSysInputDev;
+import vendor.samsung.hardware.biometrics.fingerprint.ISehFingerprint;
+
+import vendor.xiaomi.hardware.fingerprintextension.V1_0.IXiaomiFingerprint;
+
 /**
  * System service that provides an interface for authenticating with biometrics and
  * PIN/pattern/password to BiometricPrompt and lock screen.
@@ -103,6 +122,13 @@ public class AuthService extends SystemService {
     @VisibleForTesting
     final IAuthService.Stub mImpl;
 
+    private FileObserver fodFileObserver = null;
+    private ISehBiometricsFingerprint mSamsungFingerprint = null;
+    private ISehFingerprint mSamsungFingerprintAidl = null;
+    private vendor.samsung.hardware.sysinput.ISehSysInputDev mSamsungSysinputAidl = null;
+
+    private IXiaomiFingerprint mXiaomiFingerprint = null;
+
     /**
      * Class for injecting dependencies into AuthService.
      * TODO(b/141025588): Replace with a dependency injection framework (e.g. Guice, Dagger).
@@ -756,6 +782,101 @@ public class AuthService extends SystemService {
      *                 └── for (s : p.sensors)
      *                     └── BiometricService.registerAuthenticator(s)
      */
+
+    private static void samsungSysinputCommand(String arg) {
+        try {
+            android.util.Log.e("PHH-Enroll", "SysinputCommand " + arg);
+            var name = "default";
+            var fqName = vendor.samsung.hardware.sysinput.ISehSysInputDev.DESCRIPTOR + "/" + name;
+            var b = android.os.Binder.allowBlocking(android.os.ServiceManager.waitForDeclaredService(fqName));
+            var samsungSysinputAidl = vendor.samsung.hardware.sysinput.ISehSysInputDev.Stub.asInterface(b);
+            Thread.sleep(100);
+            samsungSysinputAidl.setProperty(1 /*DEFAULT_TSP*/, 18, arg);
+            android.util.Log.e("PHH-Enroll", "Done SysinputCommand");
+        } catch(Throwable t) {
+            android.util.Log.e("PHH-Enroll", "SysinputCommand", t);
+        }
+    }
+
+    private void refreshVendorServices() {
+        try {
+            mSamsungFingerprint = ISehBiometricsFingerprint.getService();
+            android.util.Log.e("PHH", "Got samsung fingerprint HAL");
+        } catch(Exception e) {
+            if (e instanceof java.util.NoSuchElementException) {
+                android.util.Log.e("PHH", "Failed getting Samsung fingerprint HAL, doesn't exist");
+            } else {
+                android.util.Log.e("PHH", "Failed getting Samsung fingerprint HAL", e);
+            }
+        }
+
+        try {
+            final String name = "default";
+            final String fqName = IFingerprint.DESCRIPTOR + "/" + name;
+            final IBinder fpBinder = Binder.allowBlocking(ServiceManager.waitForDeclaredService(fqName));
+            //final IFingerprint fp = IFingerprint.Stub.asInterface(fpBinder);
+            mSamsungFingerprintAidl = ISehFingerprint.Stub.asInterface(fpBinder.getExtension());
+        } catch(Exception e) {
+            android.util.Log.e("PHH", "Failed getting Samsung fingerprint AIDL HAL", e);
+        }
+
+        try {
+            final String name = "default";
+            final String fqName = vendor.samsung.hardware.sysinput.ISehSysInputDev.DESCRIPTOR + "/" + name;
+            final IBinder b = Binder.allowBlocking(ServiceManager.waitForDeclaredService(fqName));
+            mSamsungSysinputAidl = vendor.samsung.hardware.sysinput.ISehSysInputDev.Stub.asInterface(b);
+            mSamsungSysinputAidl.registerCallback(new vendor.samsung.hardware.sysinput.ISehSysInputCallback.Stub() {
+                @Override
+                public void onReportInformation(int type, String data) {
+                    android.util.Log.e("PHH", "Received Sysinput Report Information " +type + ", " + data);
+                }
+                @Override
+                public void onReportRawData(int type, int count, int[] data) {
+                    android.util.Log.e("PHH", "Received Sysinput Report RawData " + type + ", " + count);
+                }
+
+                @Override
+                public int getInterfaceVersion() {
+                    return this.VERSION;
+                }
+
+                @Override
+                public String getInterfaceHash() {
+                    return this.HASH;
+                }
+            });
+            String res;
+            res = mSamsungSysinputAidl.getProperty(1, 1);
+            Thread.sleep(100);
+            android.util.Log.e("PHH", "Got Samsung sysinput aidl feature " + res);
+            res = mSamsungSysinputAidl.getProperty(1, 2);
+            Thread.sleep(100);
+            android.util.Log.e("PHH", "Got Samsung sysinput aidl cmd_list " + res);
+            res = mSamsungSysinputAidl.getProperty(1, 3);
+            Thread.sleep(100);
+            android.util.Log.e("PHH", "Got Samsung sysinput aidl scrub_pos " + res);
+            res = mSamsungSysinputAidl.getProperty(1, 4);
+            Thread.sleep(100);
+            android.util.Log.e("PHH", "Got Samsung sysinput aidl fod_info " + res);
+            res = mSamsungSysinputAidl.getProperty(1, 5);
+            Thread.sleep(100);
+            android.util.Log.e("PHH", "Got Samsung sysinput aidl fod_pos " + res);
+        } catch(Exception e) {
+            android.util.Log.e("PHH", "Failed getting Samsung fingerprint AIDL HAL", e);
+        }
+
+        try {
+            mXiaomiFingerprint = IXiaomiFingerprint.getService();
+            android.util.Log.e("PHH", "Got xiaomi fingerprint HAL");
+        } catch(Exception e) {
+            if (e instanceof java.util.NoSuchElementException) {
+                android.util.Log.e("PHH", "Failed getting xiaomi fingerprint HAL, doesn't exist");
+            } else {
+                android.util.Log.e("PHH", "Failed getting xiaomi fingerprint HAL", e);
+            }
+        }
+    }
+
     @Override
     public void onStart() {
         mBiometricService = mInjector.getBiometricService();
@@ -765,11 +886,11 @@ public class AuthService extends SystemService {
             final int firstApiLevel = SystemProperties.getInt(SYSPROP_FIRST_API_LEVEL, 0);
             final int apiLevel = SystemProperties.getInt(SYSPROP_API_LEVEL, firstApiLevel);
             String[] configStrings = mInjector.getConfiguration(getContext());
-            if (configStrings.length == 0 && apiLevel <= Build.VERSION_CODES.R) {
+            if (configStrings.length == 0) {
                 // For backwards compatibility with R where biometrics could work without being
                 // configured in config_biometric_sensors. In the absence of a vendor provided
                 // configuration, we assume the weakest biometric strength (i.e. convenience).
-                Slog.w(TAG, "Found R vendor partition without config_biometric_sensors");
+                Slog.w(TAG, "Found vendor partition without config_biometric_sensors");
                 configStrings = generateRSdkCompatibleConfiguration();
             }
             hidlConfigs = new SensorConfig[configStrings.length];
@@ -787,7 +908,92 @@ public class AuthService extends SystemService {
             registerAuthenticators(hidlConfigs);
         }
 
+        refreshVendorServices();
+
         mInjector.publishBinderService(this, mImpl);
+        //samsungSysinputCommand("fod_icon_visible,1");
+        if(samsungHasCmd("fod_enable") && (mSamsungFingerprint != null || mSamsungFingerprintAidl != null)) {
+            samsungCmd("fod_enable,1,1,0");
+            String actualMaskBrightnessPath = "/sys/class/lcd/panel/actual_mask_brightness";
+            android.util.Log.e("PHH-Enroll", "Reading actual brightness file gives " + readFile(actualMaskBrightnessPath));
+            fodFileObserver = new FileObserver(actualMaskBrightnessPath, FileObserver.MODIFY) {
+                @Override
+                public void onEvent(int event, String path) {
+                    String actualMask = readFile(actualMaskBrightnessPath);
+                    refreshVendorServices();
+                    Slog.d("PHH-Enroll", "New actual mask brightness is " + actualMask);
+                    try {
+                        int eventReq = 0;
+                        if("0".equals(actualMask)) {
+                            eventReq = 1; //released
+                        } else {
+                            eventReq = 2; //pressed
+                        }
+                        if(mSamsungFingerprint != null) {
+                            mSamsungFingerprint.sehRequest(22 /* SEM_FINGER_STATE */, eventReq, new java.util.ArrayList<Byte>(),
+                                    (int retval, java.util.ArrayList<Byte> out) -> {} );
+                        }
+                    } catch(Exception e) {
+                        Slog.d("PHH-Enroll", "Failed setting samsung event for mask observer", e);
+                    }
+                }
+            };
+            fodFileObserver.startWatching();
+        }
+
+        String asusGhbmOnAchieved = "/sys/class/drm/ghbm_on_achieved";
+        if( (new File(asusGhbmOnAchieved)).exists()) {
+            fodFileObserver = new FileObserver(asusGhbmOnAchieved, FileObserver.MODIFY) {
+                boolean wasOn = false;
+                @Override
+                public void onEvent(int event, String path) {
+                    String spotOn = readFile(asusGhbmOnAchieved);
+                    if("1".equals(spotOn)) {
+                        if(!wasOn) {
+                            try {
+                                IGoodixFingerprintDaemon goodixDaemon = IGoodixFingerprintDaemon.getService();
+
+                                //Send UI ready
+                                goodixDaemon.sendCommand(200002, new java.util.ArrayList<Byte>(), (returnCode, resultData) -> {
+                                    Slog.e(TAG, "Goodix send command touch pressed returned code "+ returnCode);
+                                });
+                            } catch(Throwable t) {
+                                Slog.d("PHH-Enroll", "Failed sending goodix command", t);
+                            }
+                        }
+                        wasOn = true;
+                    } else {
+                        wasOn = false;
+                    }
+                }
+            };
+            fodFileObserver.startWatching();
+        }
+
+        String xiaomiFodPressedStatusPath = "/sys/class/touch/touch_dev/fod_press_status";
+        if(new File(xiaomiFodPressedStatusPath).exists() && mXiaomiFingerprint != null) {
+            fodFileObserver = new FileObserver(xiaomiFodPressedStatusPath, FileObserver.MODIFY) {
+                @Override
+                public void onEvent(int event, String path) {
+                    String isFodPressed = readFile(xiaomiFodPressedStatusPath);
+                    Slog.d("PHH-Enroll", "Fod pressed status: " + isFodPressed);
+                    Slog.d("PHH-Enroll", "Within xiaomi scenario for FOD");
+
+                    try {
+                    if("0".equals(isFodPressed)) {
+                        Slog.d("PHH-Enroll", "Fod un-pressed!");
+                        mXiaomiFingerprint.extCmd(android.os.SystemProperties.getInt("phh.xiaomi.fod.enrollment.id", 4), 0);
+                    } else if("1".equals(isFodPressed)) {
+                        Slog.d("PHH-Enroll", "Fod pressed!");
+                        mXiaomiFingerprint.extCmd(android.os.SystemProperties.getInt("phh.xiaomi.fod.enrollment.id", 4), 1);
+                    }
+                    } catch(Exception e) {
+                        Slog.d("PHH-Enroll", "Failed Xiaomi async extcmd", e);
+                    }
+                }
+            };
+            fodFileObserver.startWatching();
+        }
     }
 
     private void registerAuthenticators() {
@@ -1039,18 +1245,150 @@ public class AuthService extends SystemService {
                 ? modality : (modality & ~BiometricAuthenticator.TYPE_CREDENTIAL);
     }
 
+    static public int[] dynamicUdfpsProps(Context ctxt) {
+        DisplayManager mDM = (DisplayManager) ctxt.getSystemService(Context.DISPLAY_SERVICE);
+        Point displayRealSize = new Point();
+        DisplayMetrics displayMetrics = new DisplayMetrics();
+        mDM.getDisplay(0).getRealSize(displayRealSize);
+        mDM.getDisplay(0).getMetrics(displayMetrics);
+
+        if(readFile("/sys/class/fingerprint/fingerprint/position") != null) {
+            try {
+            ISehSysInputDev s = ISehSysInputDev.getService();
+            s.getTspFodInformation(0, (a, b) -> {
+                Slog.d("PHH-Enroll", "TspFod info " + a + ", " + b);
+            });
+            s.getTspFodPosition(0, (a, b) -> {
+                Slog.d("PHH-Enroll", "TspFod info " + a + ", " + b);
+            });
+            }catch(Throwable t) {
+                Slog.d("PHH-Enroll", "heya ", t);
+            }
+
+
+            android.util.Log.d("PHH", "Samsung fingerprint");
+            String[] fodPositionArray = readFile("/sys/class/fingerprint/fingerprint/position").split(",");
+            float bottomMM = Float.parseFloat(fodPositionArray[0]);
+            float areaSizeMM = Float.parseFloat(fodPositionArray[5]);
+            float heightMM = Float.parseFloat(fodPositionArray[2]);
+            float bottomInch = bottomMM * 0.0393700787f;
+            float areaSizeInch = areaSizeMM * 0.0393700787f;
+            float heightInch = heightMM * 0.0393700787f;
+            int bottomPx = (int)(bottomInch * displayMetrics.ydpi);
+            int areaSizePx = (int)(areaSizeInch * displayMetrics.ydpi);
+            int midDistPx = (int)(areaSizeInch * displayMetrics.ydpi / 2.0f);
+
+            float mW = areaSizePx/2;
+            float mH = areaSizePx/2;
+            float mX = displayRealSize.x/2;
+            //float mY = displayRealSize.y - bottomPx - midDistPx;
+            float mY = displayRealSize.y - (bottomInch * displayMetrics.ydpi) - (areaSizeInch * displayMetrics.ydpi / 2.0f);
+
+            samsungCmd(String.format("fod_rect,%d,%d,%d,%d", (int)(mX - mW/2), (int)(mY - mW/2), (int)(mX + mW/2), (int)(mY + mW/2)));
+            Slog.d("PHH-Enroll", "Display real size is " + displayRealSize.y + ", dpy " + displayMetrics.ydpi);
+
+            int udfpsProps[] = new int[3];
+            udfpsProps[0] = (int)mX;
+            udfpsProps[1] = (int)mY;
+            udfpsProps[2] = (int)mW;
+
+            try {
+                ISehBiometricsFingerprint samsungFingerprint = null;
+                samsungFingerprint = ISehBiometricsFingerprint.getService();
+                Slog.d("PHH-Enroll", "Samsung ask for sensor status");
+                samsungFingerprint.sehRequest(6, 0, new java.util.ArrayList(), (int retval, java.util.ArrayList<Byte> out) -> {
+                    Slog.d("PHH-Enroll", "Result is " + retval);
+                    for(int i=0; i<out.size(); i++) {
+                        Slog.d("PHH-Enroll", "\t" + i + ":" + out.get(i));
+                    }
+                } );
+                Slog.d("PHH-Enroll", "Samsung ask for sensor brightness value");
+                samsungFingerprint.sehRequest(32, 0, new java.util.ArrayList(), (int retval, java.util.ArrayList<Byte> out) -> {
+                    Slog.d("PHH-Enroll", "Result is " + retval);
+                    for(int i=0; i<out.size(); i++) {
+                        Slog.d("PHH-Enroll", "\t" + i + ":" + out.get(i));
+                    }
+                } );
+
+            } catch(Exception e) {
+                if (e instanceof java.util.NoSuchElementException) {
+                    Slog.d("PHH-Enroll", "Failed setting samsung3.0 fingerprint recognition, doesn't exist");
+                } else {
+                    Slog.d("PHH-Enroll", "Failed setting samsung3.0 fingerprint recognition", e);
+                }
+            }
+
+            try {
+                final String name = "default";
+                final String fqName = IFingerprint.DESCRIPTOR + "/" + name;
+                final IBinder fpBinder = Binder.allowBlocking(ServiceManager.waitForDeclaredService(fqName));
+                final IFingerprint fp = IFingerprint.Stub.asInterface(fpBinder);
+                final ISehFingerprint fpaidl = ISehFingerprint.Stub.asInterface(fpBinder.getExtension());
+
+                Slog.d("PHH-Enroll", "Samsung ask for sensor status");
+                vendor.samsung.hardware.biometrics.fingerprint.SehResult sehres = fpaidl.sehRequest(0, 6, 0, new byte[0]);
+
+                Slog.d("PHH-Enroll", "Result is " + sehres.retValue);
+                for(int i=0; i<sehres.data.length; i++) {
+                    Slog.d("PHH-Enroll", "\t" + i + ":" + sehres.data[i]);
+                }
+
+                Slog.d("PHH-Enroll", "Samsung ask for sensor brightness value");
+                sehres = fpaidl.sehRequest(0, 32, 0, new byte[0]);
+
+                Slog.d("PHH-Enroll", "Result is " + sehres.retValue);
+                for(int i=0; i<sehres.data.length; i++) {
+                    Slog.d("PHH-Enroll", "\t" + i + ":" + sehres.data[i]);
+                }
+            } catch(Exception e) {
+                Slog.d("PHH-Enroll", "Failed setting samsung3.0 fingerprint recognition", e);
+            }
+            return udfpsProps;
+        }
+
+        if(android.os.SystemProperties.get("ro.vendor.build.fingerprint").contains("ASUS_I006D")) {
+            int udfpsProps[] = new int[3];
+            udfpsProps[0] = displayRealSize.x/2;
+            udfpsProps[1] = 1741;
+            udfpsProps[2] = 110;
+            return udfpsProps;
+        }
+
+       String fpLocation = android.os.SystemProperties.get("persist.vendor.sys.fp.fod.location.X_Y");
+       if(!TextUtils.isEmpty(fpLocation) && fpLocation.contains(",")) {
+            int[] udfpsProps = new int[3];
+            String[] coordinates = fpLocation.split(",");
+            udfpsProps[0] = displayRealSize.x/2;
+            udfpsProps[1] = Integer.parseInt(coordinates[1]) + 100;
+
+            String[] widthHeight = android.os.SystemProperties.get("persist.vendor.sys.fp.fod.size.width_height").split(",");
+
+            udfpsProps[2] = (Integer.parseInt(widthHeight[0]) /2);
+            return udfpsProps;
+        }
+
+        return new int[0];
+    }
 
     private FingerprintSensorPropertiesInternal getHidlFingerprintSensorProps(int sensorId,
             @BiometricManager.Authenticators.Types int strength) {
         // The existence of config_udfps_sensor_props indicates that the sensor is UDFPS.
-        final int[] udfpsProps = getContext().getResources().getIntArray(
+        int[] udfpsProps = getContext().getResources().getIntArray(
                 com.android.internal.R.array.config_udfps_sensor_props);
 
-        // Non-empty workaroundLocations indicates that the sensor is SFPS.
-        final List<SensorLocationInternal> workaroundLocations =
-                getWorkaroundSensorProps(getContext());
+        boolean isUdfps = !ArrayUtils.isEmpty(udfpsProps);
+        if(!isUdfps) {
+            try {
+                udfpsProps = dynamicUdfpsProps(getContext());
+            } catch(Throwable t) {
+                Slog.e("PHH-Enroll", "Failed generating UDFPS props");
+            }
+        }
+        isUdfps = !ArrayUtils.isEmpty(udfpsProps);
 
-        final boolean isUdfps = !ArrayUtils.isEmpty(udfpsProps);
+        if(udfpsProps.length > 0) {
+            Slog.d("PHH-Enroll", "Got udfps infos " + udfpsProps[0] + ", " + udfpsProps[1] + ", " + udfpsProps[2]);
+        }
 
         // config_is_powerbutton_fps indicates whether device has a power button fingerprint sensor.
         final boolean isPowerbuttonFps = getContext().getResources().getBoolean(
@@ -1079,12 +1417,6 @@ public class AuthService extends SystemService {
                     resetLockoutRequiresHardwareAuthToken,
                     List.of(new SensorLocationInternal("" /* display */, udfpsProps[0],
                             udfpsProps[1], udfpsProps[2])));
-        } else if (!workaroundLocations.isEmpty()) {
-            return new FingerprintSensorPropertiesInternal(sensorId,
-                    Utils.authenticatorStrengthToPropertyStrength(strength), maxEnrollmentsPerUser,
-                    componentInfo, sensorType, false /* halControlsIllumination */,
-                    resetLockoutRequiresHardwareAuthToken,
-                    workaroundLocations);
         } else {
             return new FingerprintSensorPropertiesInternal(sensorId,
                     Utils.authenticatorStrengthToPropertyStrength(strength), maxEnrollmentsPerUser,
@@ -1118,4 +1450,67 @@ public class AuthService extends SystemService {
                 componentInfo, resetLockoutRequiresHardwareAuthToken,
                 resetLockoutRequiresChallenge);
     }
+
+   private static boolean samsungHasCmd(String cmd) {
+        try {
+            File f = new File("/sys/devices/virtual/sec/tsp/cmd_list");
+            if(!f.exists()) return false;
+
+            android.util.Log.d("PHH", "Managed to grab cmd list, checking...");
+            BufferedReader b = new BufferedReader(new FileReader(f));
+            String line = null;
+            while( (line = b.readLine()) != null) {
+                if(line.equals(cmd)) return true;
+            }
+            android.util.Log.d("PHH", "... nope");
+            return false;
+        } catch(Exception e) {
+            android.util.Log.d("PHH", "Failed reading cmd_list", e);
+            return false;
+        }
+    }
+
+    public static void samsungCmd(String cmd) {
+        try {
+            writeFile("/sys/devices/virtual/sec/tsp/cmd", cmd);
+
+            String status = readFile("/sys/devices/virtual/sec/tsp/cmd_status");
+            String ret = readFile("/sys/devices/virtual/sec/tsp/cmd_result");
+
+            android.util.Log.d("PHH", "Sending command " + cmd + " returned " + ret + ":" + status);
+        } catch(Exception e) {
+            android.util.Log.d("PHH", "Failed sending command " + cmd, e);
+        }
+    }
+
+    private static void writeFile(String path, String value) {
+        try {
+            PrintWriter writer = new PrintWriter(path, "UTF-8");
+            writer.println(value);
+            writer.close();
+        } catch(Exception e) {
+            android.util.Log.d("PHH", "Failed writing to " + path + ": " + value);
+        }
+    }
+
+    private static void writeFile(File file, String value) {
+        try {
+            PrintWriter writer = new PrintWriter(file, "UTF-8");
+            writer.println(value);
+            writer.close();
+        } catch(Exception e) {
+            android.util.Log.d("PHH", "Failed writing to " + file + ": " + value);
+        }
+    }
+
+    private static String readFile(String path) {
+        try {
+            File f = new File(path);
+
+            BufferedReader b = new BufferedReader(new FileReader(f));
+            return b.readLine();
+        } catch(Exception e) {
+            return null;
+        }
+    }
 }
diff --git a/frameworks/base/services/core/java/com/android/server/biometrics/sensors/fingerprint/FingerprintService.java b/frameworks/base/services/core/java/com/android/server/biometrics/sensors/fingerprint/FingerprintService.java
index 1ba12134ab29..41a7eb0acffa 100644
--- a/frameworks/base/services/core/java/com/android/server/biometrics/sensors/fingerprint/FingerprintService.java
+++ b/frameworks/base/services/core/java/com/android/server/biometrics/sensors/fingerprint/FingerprintService.java
@@ -913,8 +913,9 @@ public class FingerprintService extends SystemService {
                         filteredInstances = filterAvailableHalInstances(hidlSensors, aidlSensors);
 
                 final List<ServiceProvider> providers = new ArrayList<>();
-                providers.addAll(getHidlProviders(filteredInstances.first));
                 providers.addAll(getAidlProviders(filteredInstances.second));
+                if (providers.isEmpty())
+                    providers.addAll(getHidlProviders(filteredInstances.first));
 
                 return providers;
             });
diff --git a/frameworks/base/services/core/java/com/android/server/biometrics/sensors/fingerprint/aidl/FingerprintProvider.java b/frameworks/base/services/core/java/com/android/server/biometrics/sensors/fingerprint/aidl/FingerprintProvider.java
index 158179dca499..6ddab2313214 100644
--- a/frameworks/base/services/core/java/com/android/server/biometrics/sensors/fingerprint/aidl/FingerprintProvider.java
+++ b/frameworks/base/services/core/java/com/android/server/biometrics/sensors/fingerprint/aidl/FingerprintProvider.java
@@ -38,6 +38,7 @@ import android.hardware.biometrics.common.ComponentInfo;
 import android.hardware.biometrics.fingerprint.IFingerprint;
 import android.hardware.biometrics.fingerprint.PointerContext;
 import android.hardware.biometrics.fingerprint.SensorProps;
+import android.hardware.biometrics.fingerprint.SensorLocation;
 import android.hardware.fingerprint.Fingerprint;
 import android.hardware.fingerprint.FingerprintAuthenticateOptions;
 import android.hardware.fingerprint.FingerprintEnrollOptions;
@@ -241,6 +242,7 @@ public class FingerprintProvider implements IBinder.DeathRecipient, ServiceProvi
                 Slog.d(getTag(), "Adding AIDL configs");
                 final List<SensorLocationInternal> workaroundLocations =
                         getWorkaroundSensorProps(mContext);
+                android.util.Log.e("PHH-Enroll", "Poping AIDL fp provider");
                 for (SensorProps prop : props) {
                     addAidlSensors(prop, gestureAvailabilityDispatcher, workaroundLocations,
                             resetLockoutRequiresHardwareAuthToken);
@@ -252,6 +254,28 @@ public class FingerprintProvider implements IBinder.DeathRecipient, ServiceProvi
 
             for (SensorProps prop : props) {
                 final int sensorId = prop.commonProps.sensorId;
+                SensorLocation[] locations = prop.sensorLocations;
+
+                android.util.Log.e("PHH-Enroll", "Got fp props -- pre");
+                for(SensorLocation loc: locations) {
+                    android.util.Log.e("PHH-Enroll", " - " + loc.sensorLocationX + ", " + loc.sensorLocationY + ", " +loc.sensorRadius + ", disp =" + loc.display + ", shape " + loc.sensorShape);
+                }
+                if (locations.length == 1 && locations[0].sensorLocationX == 0) {
+                    int[] otherValues = com.android.server.biometrics.AuthService.dynamicUdfpsProps(mContext);
+                    if (otherValues.length > 0) {
+                        SensorLocation loc = new SensorLocation();
+                        loc.sensorLocationX = otherValues[0];
+                        loc.sensorLocationY = otherValues[1];
+                        loc.sensorRadius = otherValues[2];
+                        locations[0] = loc;
+                    }
+                }
+
+                android.util.Log.e("PHH-Enroll", "Got fp props -- post");
+                for(SensorLocation loc: locations) {
+                    android.util.Log.e("PHH-Enroll", " - " + loc.sensorLocationX + ", " + loc.sensorLocationY + ", " +loc.sensorRadius + ", disp =" + loc.display + ", shape " + loc.sensorShape);
+                }
+
                 final List<ComponentInfoInternal> componentInfo = new ArrayList<>();
                 if (prop.commonProps.componentInfo != null) {
                     for (ComponentInfo info : prop.commonProps.componentInfo) {
@@ -269,7 +293,7 @@ public class FingerprintProvider implements IBinder.DeathRecipient, ServiceProvi
                                 prop.halControlsIllumination,
                                 true /* resetLockoutRequiresHardwareAuthToken */,
                                 !workaroundLocations.isEmpty() ? workaroundLocations :
-                                        Arrays.stream(prop.sensorLocations).map(
+                                          Arrays.stream(locations).map(
                                                         location -> new SensorLocationInternal(
                                                                 location.display,
                                                                 location.sensorLocationX,
-- 
2.34.1

